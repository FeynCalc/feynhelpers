(* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *)

(* :Title: PSDLoadNumericalResults									*)

(*
	This software is covered by the GNU General Public License 3.
	Copyright (C) 2021-2024 Vladyslav Shtabovenko
*)

(* :Summary: 	Generates input for LoopIntegralFromPropagators				*)

(* ------------------------------------------------------------------------ *)

PSDLoadNumericalResults::usage=
"PSDLoadNumericalResults[files] is a simple function that loads numerical
results generated by the pySecDec script integrate__int.py into Mathematica.
The argument files is the output of PSDCreatePythonScripts that contains the
full paths to generate_int.py and integrate_int.py.

Furthermore, the function requires the options PSDComplexParameterRules and
PSDRealParameterRules that must be assigned exactly the same values that were
used when evaluating PSDCreatePythonScripts. From this information the
function will recover the full path to the numres_*_mma.m file and load it.

The options Normal (set to True by default) and Chop (set to 10^(-10) by
default) tell the function to convert the expression from SeriesData to a
polynomial and to remove numerical artefacts.

The output for each integral is a list containing two entries. The first entry
is the numerical result, while the second one provides numerical errors.";

PSDLoadNumericalResults::failmsg =
"Error! PSDLoadNumericalResults has encountered a fatal problem and must abort the computation. \
The problem reads: `1`"

Begin["`Package`"]
End[]

Begin["`PSDLoadNumericalResults`Private`"]

pslnrVerbose::usage="";

Options[PSDLoadNumericalResults] = {
	Chop									-> 10^(-10),
	FCVerbose								-> False,
	N										-> MachinePrecision,
	Normal									-> True,
	PSDResultFile							-> "numres",
	PSDComplexParameterRules				-> {},
	PSDRealParameterRules					-> {}
};

PSDLoadNumericalResults[files:{{_String, _String}..}, opt:OptionsPattern[]] :=
	PSDLoadNumericalResults[#, opt]&/@files;

PSDLoadNumericalResults[{file1_String, _String}, OptionsPattern[]] :=
	Block[{ dir, resFile, optPSDRealParameterRules, optPSDComplexParameterRules,
			res, optChop, optN, fileCandidates, allParameters, optPSDResultFile, optMessage},

		optPSDRealParameterRules			= OptionValue[PSDRealParameterRules];
		optPSDComplexParameterRules			= OptionValue[PSDComplexParameterRules];
		optChop								= OptionValue[Chop];
		optN								= OptionValue[N];
		optPSDResultFile					= OptionValue[PSDResultFile];
		optMessage 							= OptionValue[Message];

		dir = DirectoryName[file1];

		If[	!MatchQ[optPSDRealParameterRules, {___Rule}],
			Message[PSDLoadNumericalResults::failmsg, "Incorrect value of the PSDRealParameterRules option."];
			Abort[];
		];

		If[	!MatchQ[optPSDComplexParameterRules, {___Rule}],
			Message[PSDLoadNumericalResults::failmsg, "Incorrect value of the PSDComplexParameterRules option."];
			Abort[];
		];

		optPSDRealParameterRules = N[optPSDRealParameterRules, optN];
		optPSDComplexParameterRules = N[optPSDComplexParameterRules, optN];

		If[	OptionValue[FCVerbose]===False,
			pslnrVerbose=$VeryVerbose,
			If[	MatchQ[OptionValue[FCVerbose], _Integer],
				pslnrVerbose=OptionValue[FCVerbose]
			];
		];

		allParameters = Join[realParameters,complexParameters] /. optPSDRealParameterRules /. optPSDComplexParameterRules;

		resFile = optPSDResultFile <> "_" <> StringRiffle[ToString[#, InputForm] & /@ allParameters, "_"]<>"_mma.m";

		resFile = StringReplace[resFile,"._"->".0_"];

		resFile = FileNameJoin[{dir,resFile}];

		If[	!FileExistsQ[resFile],
			Message[PSDLoadNumericalResults::failmsg,"The file " <> resFile <> "does not exist."];
			Abort[]
		];

		res = Get[resFile];

		If[OptionValue[Normal],
			res = Normal[res]
		];

		If[optChop=!=False,
			res = Chop[res,optChop]
		];

		Return[res];

	];

End[]
