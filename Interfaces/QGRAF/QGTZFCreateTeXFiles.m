(* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *)

(* :Title: QGTZFCreateTeXFiles												*)

(*
	This software is covered by the GNU General Public License 3.
	Copyright (C) 2018-2024 Vladyslav Shtabovenko
*)

(* :Summary: 	Prepare TeX files with Feynman diagrams						*)

(* ------------------------------------------------------------------------ *)

QGTZFCreateTeXFiles::usage=
"QGTZFCreateTeXFiles[input_] processes the T EX representation of Feynman
diagrams generated by QGRAF in the TikZ-Feynman format. The input file is the
path to the temporary diagrams file generated by QGCreateAmp.

The function can be also invoked via QGTZFCreateTeXFiles[qgOutput] where
qgOutput is the output of QGCreateAmp.

Notice that to complete the creation of T EX files it is also necessary to
provide a file that contains stylings for the involved fields defined up via
tikzset and tikzfeynmanset. By default the function assumes that this file is
called tikz-styles.tex and is located in the same directory as the input file.
The full path to the styling file can be provided via the option
QGDiagramStyle.

The styling file contains stylings for the involved fields defined up via
tikzset and tikzfeynmanset. This file can be generated in advance using
QGTZFCreateFieldStyles in a semi-automatic fashion.

The resulting T EX code is saved to the same directory as the input file.
When the option Split is set to False (default), all diagrams are put into a
single tex file called  diagrams.tex. Compiling this file with lualatex can
take some time,  which is why this approach is recommended only for a small
$\\mathcal{O}(10)$ number of diagrams. The name of the output file can be
changed using the option QGOutputDiagrams. By default the alignment is to put
6 diagrams in one row. To change this number use the option Alignment.

Setting the option Split to True will put each diagram into a single file. The
function will also copy two shell scripts (specified via the option CopyFile)
into the same directory which will automatize the process of compiling the
source files and gluing them together. This requires the programs GNU parallel
and pdfunite.";

QGTZFCreateTeXFiles::fail=
"QGTZFCreateTeXFiles has encountered an error and must abort the evaluation. The \
error description reads: `1`";

Begin["`Package`"]

End[]

Begin["`QGTZFCreateTeXFiles`Private`"]
optTadpoleOrientation::usage="";
optTadpoleMinDistance::usage="";
qgtzfctxVerbose::usage="";

Options[QGTZFCreateTeXFiles] = {
	Alignment						-> 6,
	Extract							-> {},
	CopyFile						-> {
		FileNameJoin[{$QGScriptsDirectory,"makeDiagrams.sh"}],
		FileNameJoin[{$QGScriptsDirectory,"glueDiagrams.sh"}]
	},
	OverwriteTarget					-> True,
	FCVerbose 						-> False,
	Names 							-> Function[{x}, "dia-" <> ToString[x] <> ".tex"],
	"QGTZFTeXPrologAllInOne"		-> {
		"% !TeX program = lualatex",
		"\\documentclass[10pt,a4paper]{article}",
		"\\usepackage[utf8]{inputenc}",
		"\\usepackage{amsmath}",
		"\\usepackage[compat=1.1.0]{tikz-feynman}",
		"\\usepackage{caption}",
		"\\usepackage{adjustbox}",
		"\\usepackage[top=1.2cm, bottom=1.2cm, left=1cm, right=1cm]{geometry}",
		"\\captionsetup[figure]{name=Diagram}"
	},
	"QGTZFTeXPrologStandalone"		-> {
		"% !TeX program = lualatex",
		"\\documentclass[tikz, border={2mm 2mm 2mm 2mm}]{standalone}",
		"\\usepackage[utf8]{inputenc}",
		"\\usepackage{amsmath}",
		"\\usepackage[compat=1.1.0]{tikz-feynman}"
	},
	"TadpoleOrientation" 			-> {"135","45"},
	"TadpoleMinDistance" 			-> {"2cm"},
	StringReplace 	-> {
		"p1"->"p_1","p2"->"p_2","p3"->"p_3","p4"->"p_4","p5"->"p_5",
		"k1"->"k_1","k2"->"k_2","k3"->"k_3","k4"->"k_4","k5"->"k_5",
		"l1"->"l_1","l2"->"l_2","l3"->"l_3","l4"->"l_4","l5"->"l_5",
		"q1"->"q_1","q2"->"q_2","q3"->"q_3","q4"->"q_4","q5"->"q_5"
	},
	QGOutputDiagrams				-> "diagrams.tex",
	QGDiagramStyle					-> "tikz-styles.tex",
	Split							-> False,
	StringSplit						-> "\\diaProlog"
};

QGTZFCreateTeXFiles[{(*amps*)_String, dias_String}, opts:OptionsPattern[]] :=
	QGTZFCreateTeXFiles[dias, opts];

QGTZFCreateTeXFiles[input_String/;input=!="", OptionsPattern[]] :=
	Block[{	importedFile, time, diagramsRaw, prolog, diagrams, optNames,
			optOverwriteTarget, status, texPrologEpilog, optQGOutputDiagrams,
			finalTeXString, optAlignment, texStyle, optStringSplit, optCopyFile,
			optSplit, output, styleFile, optQGDiagramStyle, optStringReplace,
			optExtract, tmp},

		If [OptionValue[FCVerbose]===False,
			qgtzfctxVerbose=$VeryVerbose,
			If[MatchQ[OptionValue[FCVerbose], _Integer],
				qgtzfctxVerbose=OptionValue[FCVerbose]
			];
		];

		optNames 						= OptionValue[Names];
		optAlignment					= OptionValue[Alignment];
		optStringSplit					= OptionValue[StringSplit];
		optSplit						= OptionValue[Split];
		optCopyFile						= OptionValue[CopyFile];
		optQGDiagramStyle				= OptionValue[QGDiagramStyle];
		optOverwriteTarget				= OptionValue[OverwriteTarget];
		optTadpoleOrientation			= OptionValue["TadpoleOrientation"];
		optTadpoleMinDistance			= OptionValue["TadpoleMinDistance"];
		optQGOutputDiagrams				= OptionValue[QGOutputDiagrams];
		optStringReplace				= OptionValue[StringReplace];
		optExtract						= OptionValue[Extract];

		FCPrint[1,"QGTZFCreateTeXFiles: Entering. ", FCDoControl->qgtzfctxVerbose];

		If[	!FileExistsQ[input],
			Message[QGTZFCreateTeXFiles::fail,"Input file "<> input <>" not found."];
			Abort[]
		];

		If[	TrueQ[DirectoryName[optQGDiagramStyle]=!=""],
			styleFile = optQGDiagramStyle,
			styleFile = FileNameJoin[{DirectoryName[input],optQGDiagramStyle}]
		];

		If[	!FileExistsQ[styleFile],
			Message[QGTZFCreateTeXFiles::fail,"TeX style file "<> styleFile <>" not found."];
			Abort[]
		];

		If[	TrueQ[optSplit],
			(* Splitting *)
			output = DirectoryName[input],

			(* No splitting *)
			If[	TrueQ[DirectoryQ[DirectoryName[optQGOutputDiagrams]]],
				(*This directory actually exists*)
				output = optQGOutputDiagrams,
				(*It is a subdirectory *)
				output = FileNameJoin[{DirectoryName[input],OptionValue[QGOutputDiagrams]}]
			]
		];


		FCPrint[1,"QGTZFCreateTeXFiles: Importig the style file ", styleFile ,FCDoControl->qgtzfctxVerbose];
		time = AbsoluteTime[];
		texStyle = Import[styleFile, "String"];

		If[	!FreeQ[texStyle, $Failed],
			Message[QGTZFCreateTeXFiles::fail,"Failed to import the style file " <> styleFile <> " as a string."];
			Abort[]
		];
		FCPrint[1, "QGTZFCreateTeXFiles: Done importing the style file, timing: ", N[AbsoluteTime[] - time, 4], FCDoControl->qgtzfctxVerbose];

		FCPrint[1,"QGTZFCreateTeXFiles: Importig the input file ",input, FCDoControl->qgtzfctxVerbose];
		time = AbsoluteTime[];
		importedFile = Import[input, "String"];

		If[	importedFile===$Failed,
			Message[QGTZFCreateTeXFiles::fail,"Failed to import "<> input <>" as a string."];
			Abort[]
		];
		FCPrint[1, "QGTZFCreateTeXFiles: Done importing the input file, timing: ", N[AbsoluteTime[] - time, 4], FCDoControl->qgtzfctxVerbose];
		FCPrint[2, "QGTZFCreateTeXFiles: The input file contains ", StringLength[importedFile], " characters.", FCDoControl->qgtzfctxVerbose];

		FCPrint[1,"QGTZFCreateTeXFiles: Splitting the input file into single diagrams.", FCDoControl->qgtzfctxVerbose];
		time = AbsoluteTime[];
		diagramsRaw = StringSplit[importedFile, optStringSplit];

		If[	Length[diagramsRaw]<2,
			Message[QGTZFCreateTeXFiles::fail,"Something went wrong when splitting the input file or no diagrams were generated."];
			Abort[]
		];
		FCPrint[1, "QGTZFCreateTeXFiles: Done splitting the input file, timing: ", N[AbsoluteTime[] - time, 4], FCDoControl->qgtzfctxVerbose];
		FCPrint[1, "QGTZFCreateTeXFiles: The input file contains ", Length[diagramsRaw]-1,  " diagram(s).", FCDoControl->qgtzfctxVerbose];
		(*TODO Write the number of diagrams...*)

		If[	optExtract=!={},
			FCPrint[1, "QGTZFCreateTeXFiles: We only consider ", Length[optExtract],  " of them.", FCDoControl->qgtzfctxVerbose];
			tmp  = diagramsRaw[[1;;1]];
			diagramsRaw=Extract[diagramsRaw[[2;;]],List/@optExtract];
			diagramsRaw=Join[tmp,diagramsRaw]
		];

		FCPrint[1,"QGTZFCreateTeXFiles: Fixing collapsing self-energy and tadpole loops.", FCDoControl->qgtzfctxVerbose];
		time = AbsoluteTime[];
		diagrams = fixSELoopsTikz /@ diagramsRaw;
		FCPrint[1, "QGTZFCreateTeXFiles: Done fixing collapsing loops, timing: ", N[AbsoluteTime[] - time, 4], FCDoControl->qgtzfctxVerbose];

		If[optStringReplace=!={},
			diagrams = StringReplace[diagrams,optStringReplace]
		];



		FCPrint[1,"QGTZFCreateTeXFiles: Saving the output.", FCDoControl->qgtzfctxVerbose];
		time = AbsoluteTime[];

		If[	optSplit,

			(* Save each diagram separately *)
			FCPrint[1,"QGTZFCreateTeXFiles: Each diagram will be saved into a separate file.", FCDoControl->qgtzfctxVerbose];
			diagrams = Rest[diagrams];

			(* The directory doesn't exit *)
			If[	!DirectoryQ[output],
				If[	CreateDirectory[output]===$Failed,
					Message[QGTZFCreateTeXFiles::fail,"Failed to create the directory "<> output <> " for saving single diagram files."];
					Abort[]
				]
			];
			(*	Save the files *)
			status = Table[Export[FileNameJoin[{output,optNames[i]}],StringRiffle[Flatten[{
				OptionValue["QGTZFTeXPrologStandalone"],

				"\\newcommand{\\diaProlog}{}",
				"\\newcommand{\\diaEpilog}[1]{}",
				"\n",
				"\n",
				texStyle,
				"\\begin{document}",
				"\n",
				optStringSplit,
				diagrams[[i]],
				"\n",
				"\\end{document}"
			}]/. "" -> Unevaluated[Sequence[]],"\n"], "String", OverwriteTarget->optOverwriteTarget],{i,1,Length[diagrams]-1}];

			If[optCopyFile=!={},
				CopyFile[#,FileNameJoin[{output,FileNameTake[#]}], OverwriteTarget->optOverwriteTarget]&/@optCopyFile
			];

			,
			(* Save all diagrams into a single file *)

			FCPrint[1,"QGTZFCreateTeXFiles: All diagram will be saved into a single file.", FCDoControl->qgtzfctxVerbose];

			diagrams = Riffle[diagrams, optStringSplit];

			tmp  = diagrams[[1;;1]];
			diagrams = Join[tmp,Riffle[diagrams[[2;;]],"\\\\\n",optAlignment*2+1]];

			finalTeXString = {
				OptionValue["QGTZFTeXPrologAllInOne"],
				"\\newcommand{\\diaProlog}{\\begin{minipage}{"<>ToString[N[0.9/optAlignment,3]]<>"\\textwidth}  \\centering \\begin{adjustbox}{fbox,max width=\\textwidth} }",
				"\\newcommand{\\diaEpilog}[1]{\\end{adjustbox} \\captionof*{figure}{dia {#1}}  \\end{minipage} }",
				"\n",
				texStyle,
				"\\begin{document}",
				"\n",
				StringJoin[diagrams],
				"\n",
				"\\end{document}"
			};
			finalTeXString = StringRiffle[Flatten[finalTeXString] /. "" -> Unevaluated[Sequence[]],"\n"];

			status = Export[output,finalTeXString, "String", OverwriteTarget->optOverwriteTarget]
		];

		If[	!FreeQ[status,$Failed],
				Message[QGTZFCreateTeXFiles::fail,"Something went wrong when saving single diagram files."];
				Abort[]
		];

		FCPrint[1,"QGTZFCreateTeXFiles: Leaving. ", FCDoControl->qgtzfctxVerbose];

		output
	];

(* fixes the direction of lines in 1-loop SE diagrams to prevent them from collapsing to a point *)
fixSELoopsTikz[str_] :=
	FixedPoint[
		StringReplace[#, {
			(**)
			"v" ~~ i1_ ~~ Shortest[" -- [" ~~ st1__ ~~ "] "] ~~ "v" ~~ i2_ ~~ ",\nv" ~~ i2_ ~~ Shortest[" -- [" ~~ st2__ ~~ "] "] ~~ "v" ~~ i1_ ~~ ",\n" /;
			StringFreeQ[st1, {"half left", "[", "]"}] && StringFreeQ[st2, {"half left", "half right", "[", "]"}] :>
				("v" ~~ i1 ~~ " -- [half left, "  ~~ st1 ~~ "] " ~~ "v" ~~ i2 ~~ ",\nv" ~~ i2 ~~ " -- [half left, " ~~ st2 ~~ "] " ~~ "v" ~~ i1 ~~ ",\n"),

			(*
			Example:
			v2 -- [qgVStyle, qgVMomentumArrowStyle={l1-p+q}{}] v1,
			v2 -- [qgVStyle, qgVMomentumArrowStyle={-l1}{}] v1,
			*)
			"v" ~~ i1_ ~~ Shortest[" -- [" ~~ st1__ ~~ "] "] ~~ "v" ~~ i2_ ~~ ",\nv" ~~ i1_ ~~ Shortest[" -- [" ~~ st2__ ~~ "] "] ~~ "v" ~~ i2_ ~~ ",\n" /;
			StringFreeQ[st1, {"half left", "[", "]"}] && StringFreeQ[st2, {"half left", "half right", "[", "]"}] :>
				("v" ~~ i1 ~~ " -- [half right, " ~~ st1 ~~ "] " ~~ "v" ~~ i2 ~~ ",\nv" ~~ i1 ~~ " -- [half left, " ~~ st2 ~~ "] " ~~ "v" ~~ i2 ~~ ",\n"),
			(* v3 -- [qgChiDaggerStyle, qgChiDaggerMomentumArrowStyle={l1}{}] v3, *)
			"v" ~~ i1_ ~~ Shortest[" -- [" ~~ st1__ ~~ "] "] ~~ "v" ~~ i1_ ~~ "," /; StringFreeQ[st1, {"loop", "[", "]"}] :>
				("v" ~~ i1 ~~ " -- [out="<> optTadpoleOrientation[[1]]  <> "," <> "in=" <> optTadpoleOrientation[[2]] <> ", loop, min distance="<>optTadpoleMinDistance<>", " ~~ st1 ~~ "] " ~~  "v" ~~ i1 ~~ ",")
		}] &, str];




End[]

